
// JWT Authentication for Secure Banking API Endpoints

const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// ===== Secret Key for JWT =====
const SECRET_KEY = 'mysecretkey';

// ===== Hardcoded User Data =====
const USER = {
  username: 'admin',
  password: 'password123'
};

// ===== In-Memory Bank Account =====
let accountBalance = 1000;

// ===== Middleware: Verify JWT Token =====
function verifyToken(req, res, next) {
  const authHeader = req.headers['authorization'];

  if (!authHeader) {
    return res.status(401).json({ error: 'Authorization header missing' });
  }

  const [type, token] = authHeader.split(' ');

  if (type !== 'Bearer' || !token) {
    return res.status(403).json({ error: 'Invalid Authorization format' });
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Invalid or expired token' });
    }
    req.user = user; // attach user data to request
    next();
  });
}

// ===== Route: Login =====
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Check credentials
  if (username === USER.username && password === USER.password) {
    // Create JWT token
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
    res.json({ message: 'Login successful', token });
  } else {
    res.status(401).json({ error: 'Invalid username or password' });
  }
});

// ===== Protected Routes =====

// View balance
app.get('/balance', verifyToken, (req, res) => {
  res.json({ balance: accountBalance });
});

// Deposit money
app.post('/deposit', verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid deposit amount' });
  }
  accountBalance += amount;
  res.json({ message: `Deposited ₹${amount}`, newBalance: accountBalance });
});

// Withdraw money
app.post('/withdraw', verifyToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid withdrawal amount' });
  }
  if (amount > accountBalance) {
    return res.status(400).json({ error: 'Insufficient balance' });
  }
  accountBalance -= amount;
  res.json({ message: `Withdrew ₹${amount}`, newBalance: accountBalance });
});

// ===== Start Server =====
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Banking API running at http://localhost:${PORT}`);
});
