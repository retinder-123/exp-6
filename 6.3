// Account Transfer System with Balance Validation in Node.js

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

// ====== Setup ======
const app = express();
app.use(bodyParser.json());

// ====== MongoDB Connection ======
mongoose.connect('mongodb://localhost:27017/bankDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('✅ Connected to MongoDB'))
.catch(err => console.error('❌ MongoDB connection error:', err));

// ====== Account Schema ======
const accountSchema = new mongoose.Schema({
  name: String,
  balance: Number
});

const Account = mongoose.model('Account', accountSchema);

// ====== Route: Create Account (for testing) ======
app.post('/create', async (req, res) => {
  try {
    const { name, balance } = req.body;
    const account = new Account({ name, balance });
    await account.save();
    res.json({ message: 'Account created successfully', account });
  } catch (err) {
    res.status(500).json({ error: 'Error creating account', details: err.message });
  }
});

// ====== Route: Transfer Money ======
app.post('/transfer', async (req, res) => {
  const { senderName, receiverName, amount } = req.body;

  if (!senderName || !receiverName || !amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid input data' });
  }

  try {
    // Step 1: Fetch sender and receiver
    const sender = await Account.findOne({ name: senderName });
    const receiver = await Account.findOne({ name: receiverName });

    if (!sender) return res.status(404).json({ error: 'Sender account not found' });
    if (!receiver) return res.status(404).json({ error: 'Receiver account not found' });

    // Step 2: Check balance
    if (sender.balance < amount) {
      return res.status(400).json({ error: 'Insufficient balance' });
    }

    // Step 3: Deduct from sender, then credit receiver (sequential updates)
    sender.balance -= amount;
    receiver.balance += amount;

    await sender.save();
    await receiver.save();

    res.json({
      message: 'Transfer successful',
      sender: { name: sender.name, balance: sender.balance },
      receiver: { name: receiver.name, balance: receiver.balance }
    });
  } catch (err) {
    res.status(500).json({ error: 'Error during transfer', details: err.message });
  }
});

// ====== Route: View All Accounts ======
app.get('/accounts', async (req, res) => {
  const accounts = await Account.find();
  res.json(accounts);
});

// ====== Start Server ======
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});
